rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /artifacts/{appId} {

      // ðŸ”¹ Helper Functions
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin(appId) {
        return isSignedIn() &&
          get(/databases/$(database)/documents/artifacts/$(appId)/public/data/users/$(request.auth.uid)).data.role == 'admin';
      }

      function isMatchConfirmingPlayer() {
        return resource.data.status == 'pending_confirmation' &&
          (resource.data.team1.hasAny([request.auth.uid]) || resource.data.team2.hasAny([request.auth.uid])) &&
          !resource.data.confirmedBy.hasAny([request.auth.uid]) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['confirmedBy']) &&
          request.resource.data.confirmedBy is list &&
          request.resource.data.confirmedBy.hasAll(resource.data.confirmedBy.concat([request.auth.uid])) &&
          request.resource.data.confirmedBy.size() == resource.data.confirmedBy.size() + 1;
      }

      // ðŸ”¹ Public User Profiles
      match /public/data/users/{publicUserId} {
        allow read: if true;

        allow create: if request.resource.data.firebaseAuthUid == publicUserId
                      && (request.resource.data.role == 'member' || request.resource.data.role == 'admin');

        allow update: if isSignedIn()
                      && request.auth.uid == publicUserId
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'profilePicUrl'])
                      && request.resource.data.name is string
                      && request.resource.data.profilePicUrl is string;

        allow delete: if isSignedIn()
                      && (request.auth.uid == publicUserId || isAdmin(appId));
      }

      // ðŸ”¹ App Settings (Admins only)
      match /public/data/appSettings/{docId} {
        allow read: if true;
        allow write: if isAdmin(appId);
      }

      // ðŸ”¹ Slots (Admin only modification)
      match /public/data/slots/{slotId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin(appId);
      }

      // ðŸ”¹ Waiting Lists
      match /public/data/waitingLists/{docId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
        // Updates not allowed
      }

      // ðŸ”¹ Matches
      match /public/data/matches/{matchId} {
        allow read: if true;
        allow create: if false; // only via callable function or admin server-side
        allow update: if isSignedIn() && (isAdmin(appId) || isMatchConfirmingPlayer());
        allow delete: if isAdmin(appId);
      }

      // ðŸ”¹ Private User Data
      match /users/{userId}/profile/data {
        allow create: if request.resource.data.firebaseAuthUid == userId;

        allow read, update, delete: if isSignedIn() &&
          (request.auth.uid == userId || isAdmin(appId));
      }

      // ðŸ”¹ FCM Tokens
      match /users/{userId}/fcmTokens/{fcmTokenId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // ðŸ”’ Catch-all Deny Rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
